git bash command

기본적으로 깃은 리눅스 명령어와 매우 유사함
리눅스 명령어를 그대로 사용할 수 있는듯
물론 깃 자체적인 명령어도 있는것으로 보임


명령어 검색
리눅스 명령어, 깃 저장소 명령어, 


-- 리눅스 명령어 --------------------------------

vim 파일명.확장자 :
해당 파일명과 일치하는 파일이 없다면 새로생성하고, 있다면 기존에 있던 파일을 엶
A 혹은 I를 입력하면 입력모드로 변하면서 생성한 파일에 텍스트를 입력할 수 있음
esc 키를 누르고 :wq 를 입력하면 저장 후 종료됨.
w : 저장, q : 종료, :q! : 문서를 저장하지 않고 종료. 임시파일인 .swp 생성


cat 파일명.확장자 :
파일명에 해당하는 파일의 내용을 불러옴
> : 새로운 파일 생성
>> : 파일 뒤에 내용을 붙여넣음


exit : 
터미널 종료


ssh-keygen :
ssh 키를 생성
홈디렉토리에서 ls 명령어를 치면, .ssh 디렉토리가 생성되어있음
내부에 있는 파일들이 각각 프라이빗, 퍼블릭 키
해당 키를 이용해서 깃허브와 연동시켜둘 수 있음


-- 깃 저장소 명령어 -------------------------------

git init [디렉토리명]:
현재 위치에 깃 저장소를 생성
디렉토리명을 적어주면, 해당 디렉토리가 없을 때 디렉토리를 생성하고, 깃 저장소로 만듦


git status :
깃 상태 확인


git add :
스테이징 명령어
.과 함께 사용하면 한번에 모든 파일을 올릴 수 있음


git commit :
스테이지에 올라온 파일을 커밋
	-m "입력할메세지" : 해당 옵션을 사용하면 커밋할 떄 메세지를 추가할 수 있음
	-a : git add. git -a commit 하면, add하고, commit 하지 않아도 됨.
	--amend : 바로 전에 커밋한 메세지를 수정


git log :
커밋한 버전에 대한 설명
	--stat : 커밋에 관련된 파일까지 함께 보여줌
	--oneline : 한 줄에 한 커밋씩 나타냄	
	--branches : 각 브랜치의 커밋을 함께 보여줌
	--graph : 브랜치와 커밋의 관계를 그래프 형태로 표시
	브랜치A..브랜치B : A에는 없고 B에는 있는 커밋을 보여줌


git diff :
커밋한 버전과 저장소에 있는 버전의 차이를 보여줌


git checkout :
	--파일명 : 작업 트리에서 수정한 파일 되돌림
	브랜치명 : 지정한 브랜치로 체크아웃. 

git reset HEAD :
스테이징 되돌리거나 최신 커밋 되돌릴 때 사용
	파일명 : HEAD 파일명. 스테이징 되돌림(내림. 취소). 스테이지 올라가기 전으로 되돌아감
	^ : HEAD^. 최신 커밋 되돌림(취소). 스테이지에서도 내려감
	--sort HEAD^ : 최근 커밋하기 전으로 되돌림
	--mixed HEAD^ : 최근 커밋과 스테이징 하기 전 상태로 작업트리 되돌림. 옵션없이 git reset 사용했을 때, 디폴트 값으로 작동
	--hard HEAD^ : 최근 커밋, 스테이징, 파일 수정하기 전으로 작업트리 되돌림. 이 옵션으로 되돌린 내용은 복구 불가
	--hard 커밋해시 : 커밋해시는 git log를 사용해서 볼 수 있음. 커밋해시의 내용을 최신 커밋으로 변경. 해당 커밋 이후에 존재하던 커밋은 삭제됨


git revert :
커밋을 삭제하지 않고 되돌림
	커밋해시 : 기존에 존재하던 커밋은 제거하지 않고 지정한 커밋을 커밋


git branch [브랜치명]:
브랜치를 생성하거나 확인. 브랜치 명을 입력하지 않으면, 브랜치를 확인하며 기본적으로 마스터 브랜치가 존재함. 브랜치 명을 입력하면 새로운 브랜치를 생성함
	-d : 지정한 브랜치 제거. 주로 병합 끝난 브랜치를 제거할 때 사용. 해당 명으로 브랜치를 만들면 다시 생성됨. 완전히 제거하는게 아니라 감추는 느낌


git marge 브랜치명:
먼저 git checkout master 명령으로 마스터 브랜치로 체크아웃해야함
그 다음 해당 명령어를 입력하면, 해당브랜치와 마스터 브랜치를 병합함
자신이 체크아웃되어있는 브랜치와 입력한 브랜치를 병합하는 것 같은데 맞는지 확인해봐야할듯
	--no-edit : 편집기 창을 열지 않음
	--edit : no-edit 옵션을 준 브랜치에 커밋메세지를 추가하거나 수정하고 싶을 때 사용


git stash :
수정중인 파일을 감추거나 되돌림. modified 상태의 파일이 존재할 때, 해당 명령어를 입력하면 status 명령어를 입력했을 때, 해당 파일들이 보이지 않게 됨. 숨겨진 파일들은 stash 목록에서 확인 가능함. 각각 stash@[0], stash@[1], ..., stash@[n]의 형태로 배열느낌으로 기록되는듯. 먼저감춘것을 아래, 최근것을 위에 두는 등 스택형태로 기록됨. 
	pop : 감춘 항목을 다시 되돌림. 스택에서 팝하는것이므로 가장 최근것을 빼냄
	apply : 목록에 기록된것이 나중에도 다시 쓰일확률이 높을 때 사용. 최근 항목 빼내지만, 기록은 그대로 남아있게 함
	drop : 목록에 남아있는 가장 최근 항목을 제거


-- 깃허브 명령어 ------------------------------------------

git remote :
원격저장소(깃허브URL)과 관련된 명령어
	add origin 깃허브저장소URL : 지정한 원격저장소(remote)에 origin을 추가하겠다고 git에 알려주는것. origin은 깃허브 저장소를 가르킴. 지역 장소를 특정 원격 저장소에 연결하는 것은 한 번만 하면 됨
	-v : 원격 저장소에 제대로 연결되어있는지 확인


git push [옵션] origin master :
지역 저장소의 브랜치를 origin(원격저장소 master브랜치)로 푸쉬하라는 명령어
	-u origin master: 지역 저장소의 브랜치를 원격 저장소의 마스터 브랜치에 연결하기 위한 옵션. 처음 한 번만 사용하면됨.
	

git pull origin master :
origin의 내용을 마스터 브랜치로 가져오는 명령어



